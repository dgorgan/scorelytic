name: CI

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - '**/docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - '**/docs/**'

env:
  # Environment variables for your jobs
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  LOGTAIL_SOURCE_TOKEN: ${{ secrets.LOGTAIL_SOURCE_TOKEN }}
  YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}
  SENTRY_DSN_CLIENT: ${{ secrets.SENTRY_DSN_CLIENT }}
  SENTRY_DSN_SERVER: ${{ secrets.SENTRY_DSN_SERVER }}

  # Sentry and client/server-related secrets/vars
  NEXT_PUBLIC_API_URL: ${{ vars.NEXT_PUBLIC_API_URL }}
  NEXT_PUBLIC_SUPABASE_URL: ${{ vars.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ vars.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  SENTRY_PROJECT_CLIENT: ${{ vars.SENTRY_PROJECT_CLIENT }}

  # Additional non-secret environment vars
  PORT: 5000
  DISABLE_OPENAI: false

jobs:
  # Setup job to install pnpm and cache dependencies
  setup:
    environment: CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
      - name: Install pnpm globally
        run: npm install -g pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile

  # Turbo pipeline job with reduced concurrency
  turbo-pipeline:
    needs: setup
    environment: CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
      - name: Install pnpm globally
        run: npm install -g pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Print all env vars (masking secrets)
        run: env | sort | sed 's/\(SUPABASE\|SERVICE_ROLE\|KEY\|TOKEN\|SECRET\|API_KEY\|DSN\|PASSWORD\|PRIVATE\|ANON\)=.*/\1=***MASKED***/g'
      - name: Print SUPABASE env vars
        run: env | grep SUPABASE || true
      - name: Print .env files (if any)
        run: |
          find . -name ".env*" -exec echo "--- {} ---" \; -exec cat {} \;
      - name: Print env after install
        run: env | grep SUPABASE || true
      - name: Print .env files after install
        run: |
          find . -name ".env*" -exec echo "--- {} ---" \; -exec cat {} \;
      - name: Print env before build
        run: env | grep SUPABASE || true
      - name: Print .env files before build
        run: |
          find . -name ".env*" -exec echo "--- {} ---" \; -exec cat {} \;

      # - name: Write .env file for test environment
      #   run: |
      #     echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
      #     echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env
      - name: Run turbo pipeline (with reduced concurrency)
        run: pnpm turbo run build lint type-check test --concurrency=2 --cache-dir=.turbo
      - name: Print env before type-check
        run: env | grep SUPABASE || true
      - name: Print .env files before type-check
        run: |
          find . -name ".env*" -exec echo "--- {} ---" \; -exec cat {} \;
      - name: Print env before test
        run: env | grep SUPABASE || true
      - name: Print .env files before test
        run: |
          find . -name ".env*" -exec echo "--- {} ---" \; -exec cat {} \;

  # E2E tests job
  e2e:
    needs: turbo-pipeline
    environment: CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
      - name: Install pnpm globally
        run: npm install -g pnpm
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Install system dependencies (ffmpeg, jq)
        run: sudo apt-get update && sudo apt-get install -y ffmpeg jq
      - name: Run Playwright E2E tests
        run: pnpm test:e2e
