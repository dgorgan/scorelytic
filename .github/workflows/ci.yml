name: CI

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - '**/docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - '**/docs/**'

env:
  # Server secrets from GitHub secrets
  SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
  SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
  SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
  LOGTAIL_SOURCE_TOKEN: ${{ secrets.LOGTAIL_SOURCE_TOKEN }}

  # Server non-secret environment vars
  PORT: 5000
  DISABLE_OPENAI: false
  LLM_PROMPT_STYLE: DEFAULT

  # Client secrets
  NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
  NEXT_PUBLIC_SENTRY_DSN: ${{ secrets.NEXT_PUBLIC_SENTRY_DSN }}

  # Client non-secret environment vars
  NEXT_PUBLIC_API_URL: http://localhost:5000
  NEXT_PUBLIC_SENTRY_ENVIRONMENT: ci
  NEXT_PUBLIC_SENTRY_RELEASE: ci

  # Shared or other keys
  YOUTUBE_API_KEY: ${{ secrets.YOUTUBE_API_KEY }}

jobs:
  # Setup job caches dependencies and installs pnpm for other jobs to use
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Cache pnpm store for faster installs
      - name: Cache pnpm store for faster installs
        id: cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install pnpm package manager globally
        run: npm i -g pnpm

      - name: Install all dependencies using pnpm (frozen lockfile for consistency)
        run: pnpm install --frozen-lockfile

  # Build job compiles client and server code
  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Restore pnpm store cache to speed install
      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install pnpm
        run: npm i -g pnpm

      - name: Install dependencies with pnpm
        run: pnpm install --frozen-lockfile

      # Build client and server projects with tsc -b
      - name: Build shared, client, and server projects
        run: tsc -b

  # Lint job checks code style and quality
  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install pnpm
        run: npm i -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run linting scripts
        run: pnpm lint

  # Type-check job verifies TypeScript correctness
  type-check:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Restore pnpm store cache
      - name: Restore pnpm store cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install pnpm
        run: npm i -g pnpm

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run type checking
        run: pnpm type-check

  # Unit tests job runs all test:* scripts and generates unified coverage report
  unit-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      # Install system deps required by tests
      - name: Install system dependencies (ffmpeg, jq)
        run: sudo apt-get update && sudo apt-get install -y ffmpeg jq

      - name: Install pnpm
        run: npm i -g pnpm

      - name: Install dependencies with pnpm
        run: pnpm install --frozen-lockfile

      - name: Write environment variable files for tests
        run: echo '${{ toJson(env) }}' | bash ./scripts/write-envs.sh

      # Run all tests across all workspaces and merge coverage
      - name: Run tests and generate unified coverage report
        run: pnpm coverage

  # E2E tests job runs Playwright end-to-end tests against the built client
  e2e-tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install system dependencies (ffmpeg, jq)
        run: sudo apt-get update && sudo apt-get install -y ffmpeg jq

      - name: Install pnpm
        run: npm i -g pnpm

      - name: Install dependencies with pnpm
        run: pnpm install --frozen-lockfile

      - name: Write environment variable files for e2e
        run: echo '${{ toJson(env) }}' | bash ./scripts/write-envs.sh

      - name: Copy client .env to .env.local for build/start
        run: cp client/.env client/.env.local

      - name: Build client app for e2e
        run: pnpm --filter client build

      - name: Start client in background (on port 4000)
        run: nohup pnpm --filter client start -- -p 4000 > client.log 2>&1 &

      - name: Wait until client is responsive before testing
        run: npx wait-on http://localhost:4000

      - name: Install Playwright dependencies with necessary OS libs
        run: npx playwright install --with-deps

      - name: Run Playwright end-to-end tests
        run: npx playwright test client/test/e2e

  # JS artifact check ensures no unwanted JS files remain in source directories
  check-js-artifacts:
    needs: [unit-tests, e2e-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for accidental JS artifacts in source folders
        run: |
          if find server/src client/services client/test -type f \( -name '*.js' -o -name '*.js.map' -o -name '*.d.ts' \) ! -path '*/dist-server/*' ! -path '*/.next/*' | grep .; then
            echo '‚ùå JS artifacts found in source! Clean up before merging.'
            exit 1
          fi
